# handlers/button_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext
from data.chat_data import chat_data
from utils.logger import logger
from handlers.message_handler import cleanup_ephemeral_messages
from data.db_service import (
    mark_product_as_deleted, 
    get_active_products_by_chat,
    get_products_by_ids, 
    mark_product_as_purchased
)


async def button(update: Update, context: CallbackContext):
    query = update.callback_query
    chat_id = query.message.chat_id
    item = query.data

    # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    if item == "finish_editing":
        print("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
        await cleanup_ephemeral_messages(chat_id, context)

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
        print(f"üîç –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è —á–∞—Ç—É {chat_id}")
        products = get_active_products_by_chat(chat_id)
        print(f"üì¶ –û—Ç—Ä–∏–º–∞–Ω—ñ —Ç–æ–≤–∞—Ä–∏: {products}")

        if products:
            product_list = "\n".join([f"{product[1]}" for product in products])
            response_text = f"–¢–û–í–ê–†–ò –î–õ–Ø –ü–û–ö–£–ü–ö–ò:\n{product_list}"
        else:
            response_text = "–í–∞—à —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π."

        print(f"üì¢ –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {response_text}")
        await context.bot.send_message(chat_id, response_text)
        await query.edit_message_text("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        await query.answer()
        return

   # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    if item == "finish_purchasing":
        chat_data[chat_id]['purchase_mode'] = False

        # IDs –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        purchased_product_ids = set(chat_data[chat_id]['purchased_items'])  # –ó–∞–±–∏—Ä–∞—î–º–æ ID –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        print(f"IDs –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {purchased_product_ids}")

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–≤–∞—Ä–∏ –∑–∞ —ó—Ö ID
        purchased_products = get_products_by_ids(purchased_product_ids)  
        print(f"üì¶ –ö—É–ø–ª–µ–Ω—ñ —Ç–æ–≤–∞—Ä–∏: {purchased_products}")

        # –§–æ—Ä–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤ –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        purchased_names = [product[1] for product in purchased_products]

        # –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø–∏—Å–∫—É –∫—É–ø–ª–µ–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤
        purchased_list = "\n".join(purchased_names) if purchased_names else "–ø–æ—Ä–æ–∂–Ω—ñ–π"

        # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        text = f"–í–∏ –æ–±—Ä–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–æ–≤–∞—Ä–∏ —è–∫ –∫—É–ø–ª–µ–Ω—ñ:\n{purchased_list}\n–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—Ç—ñ—Å—Ç—å —Ü–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤:"
        await cleanup_ephemeral_messages(chat_id, context)
        sent = await context.bot.send_message(chat_id, text)
        chat_data[chat_id]['purchased_message_id'] = sent.message_id
        chat_data[chat_id]['awaiting_cost'] = True
        await query.answer()
        return


    # –ü–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —è–∫ –∫—É–ø–ª–µ–Ω–æ–≥–æ
    if chat_data[chat_id]['purchase_mode']:
        try:
            product_id = int(item)
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
            mark_product_as_purchased(product_id)
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'purchased'.")

            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É
            chat_data[chat_id]['list_items'] = [
                i for i in chat_data[chat_id]['list_items'] if str(i) != str(product_id)
            ]
            chat_data[chat_id]['purchased_items'].append(str(product_id))

            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
            products = get_active_products_by_chat(chat_id)

            if products:
                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö –∫–Ω–æ–ø–æ–∫
                keyboard = [
                    [InlineKeyboardButton(f"{product[1]}", callback_data=str(product[0]))]
                    for product in products
                ]
                keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="finish_purchasing")])

                # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä—ñ–≤
                full_list = "\n".join([f"{product[1]}" for product in products])

                # –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–æ–≤–∞—Ä–∞–º–∏
                await query.edit_message_text(
                    text=f"–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è –∫—É–ø–ª–µ–Ω–∏–º–∏:\n\n",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            else:
                # –Ø–∫—â–æ —Ç–æ–≤–∞—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
                await query.edit_message_text(
                    text="–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–±—ñ—Ä —Ç–æ–≤–∞—Ä—ñ–≤", callback_data="finish_purchasing")]
                    ])
                )
        except ValueError:
            logger.error(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä—É: {item}")

        await query.answer()
        return


    # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    try:
        product_id = int(item)
        print(f"‚úÖ –ù–∞—Ç–∏—Å–Ω—É—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –∑ ID: {product_id}")
        mark_product_as_deleted(product_id)
        logger.info(f"–¢–æ–≤–∞—Ä –∑ ID {product_id} –≤–∏–¥–∞–ª–µ–Ω–æ —É —á–∞—Ç—ñ {chat_id}.")

        # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
        products = get_active_products_by_chat(chat_id)
        if products:
            keyboard = [
                [InlineKeyboardButton(f"{product[1]}", callback_data=str(product[0]))]
                for product in products
            ]
            keyboard.append([InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", callback_data="finish_editing")])
            full_list = "\n".join([f"{product[1]}" for product in products])

            await query.edit_message_text(
                text=f"–û–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await query.edit_message_text(
                text="–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π!",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—è", callback_data="finish_editing")]
                ])
            )
    except ValueError:
        logger.error(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID —Ç–æ–≤–∞—Ä—É: {item}")

    await query.answer()
