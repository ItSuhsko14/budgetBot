import os
import psycopg2
import sys
import time
import datetime

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.env_loader import load_env

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_env()
DATABASE_URL = os.environ.get("DATABASE_URL")

def log(msg):
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {msg}")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def connect_to_database(retries=5, delay=2):
    for attempt in range(1, retries + 1):
        log(f"üîå –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—Å–ø—Ä–æ–±–∞ {attempt})")
        try:
            conn = psycopg2.connect(DATABASE_URL)
            log("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ")
            return conn
        except Exception as e:
            log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {e}")
            if attempt < retries:
                log(f"‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω–∞ —Å–ø—Ä–æ–±–∞ —á–µ—Ä–µ–∑ {delay} —Å...")
                time.sleep(delay)
            else:
                log("üî¥ –í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
    return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
def create_tables():
    log(f"üåç DATABASE_URL: {DATABASE_URL}")
    conn = connect_to_database()
    if conn:
        try:
            cur = conn.cursor()
            log("üß± –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å...")

            cur.execute("""
                CREATE TABLE IF NOT EXISTS products (
                    product_id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL,
                    category TEXT NOT NULL,
                    chat_id BIGINT NOT NULL,
                    status TEXT NOT NULL CHECK (status IN ('active', 'deleted', 'purchased')) DEFAULT 'active'
                );
            """)

            cur.execute("""
                CREATE TABLE IF NOT EXISTS expenses (
                    expense_id SERIAL PRIMARY KEY,
                    expense_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    amount NUMERIC(10, 2) NOT NULL,
                    category TEXT NOT NULL,
                    product_ids INTEGER[] NOT NULL,
                    chat_id BIGINT NOT NULL
                );
            """)


            cur.execute("""
                CREATE TABLE IF NOT EXISTS categories (
                    category_id SERIAL PRIMARY KEY,
                    name TEXT NOT NULL,
                    chat_id BIGINT NOT NULL,
                    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    UNIQUE(name, chat_id)  -- —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –ø–∞—Ä–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —á–∞—Ç
                );
            """)

            conn.commit()
            log("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        log("üî¥ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î ‚Äî —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")

# CRUD-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
def add_expense(amount, category, product_ids, chat_id):
    log(f"üì• –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏: {amount}, –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}, —Ç–æ–≤–∞—Ä–∏: {product_ids}, —á–∞—Ç: {chat_id}")
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                INSERT INTO expenses (amount, category, product_ids, chat_id)
                VALUES (%s, %s, %s, %s)
                RETURNING expense_id;
            """, (amount, category, [int(pid) for pid in product_ids], chat_id))
            expense_id = cur.fetchone()[0]
            conn.commit()
            log(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ –∑ ID {expense_id} –¥–æ–¥–∞–Ω–∞")
            return expense_id
        except Exception as e:
            log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
        finally:
            cur.close()
            conn.close()
    else:
        log("üî¥ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î ‚Äî –Ω–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É")

# –ó–∞–ø—É—Å–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
if __name__ == "__main__":
    create_tables()