from data.database import connect_to_database
from utils.logger import log

# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—é products
def add_product(chat_id, name, category=None):

    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                INSERT INTO products (chat_id, name, category, status)
                VALUES (%s, %s, %s, %s)
                RETURNING product_id;
            """, (chat_id, name, category, 'active'))
            
            result = cur.fetchone()
            if result:
                product_id = result[0]
                conn.commit()
                print(f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–¥–∞–Ω–æ –∑ ID {product_id}.")
                return product_id
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞: INSERT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ ID.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—É: {e}")
        finally:
            cur.close()
            conn.close()

def make_db_request_by_query(query, params):
    conn = None
    try:
        conn = connect_to_database()
        if not conn:
            log("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
            return None
            
        cur = conn.cursor()
        cur.execute(query, params)
       # –î–ª—è SELECT –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        if query.strip().upper().startswith('SELECT'):
            result = cur.fetchall()
        # –î–ª—è —ñ–Ω—à–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–º—ñ–Ω–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤
        else:
            result = cur.rowcount
        conn.commit()
        return result
    except Exception as e:
        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –≤ –±–∞–∑—É: {e}")
        if conn:
            conn.rollback()
        return None
    finally:
        if conn:
            try:
                if 'cur' in locals() and cur:
                    cur.close()
                conn.close()
            except Exception as e:
                log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä–∏—Ç—Ç—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
    
def create_category(chat_id, name):
    return make_db_request_by_query("""
            INSERT INTO categories (chat_id, name)
            VALUES (%s, %s)
            RETURNING category_id;
        """, (chat_id, name))
            

def get_all_categories(chat_id):
    result = make_db_request_by_query("""
        SELECT category_id, name
        FROM categories
        WHERE chat_id = %s
        ORDER BY name;
    """, (chat_id,))
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —è–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ–º–∞—î
    return result if result else []

def delete_category_from_db(chat_id, category_id):
    category = make_db_request_by_query("""
            SELECT name, category_id
            FROM categories
            WHERE category_id = %s and chat_id = %s;
        """, (category_id, chat_id))
    log(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è {category} –∑ ID {category_id} –≤–∏–¥–∞–ª–µ–Ω–∞")
    return make_db_request_by_query("""
            DELETE FROM categories
            WHERE category_id = %s and chat_id = %s;
        """, (category_id, chat_id))

def get_active_products_by_chat(chat_id):
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                SELECT product_id, name, category 
                FROM products 
                WHERE chat_id = %s AND status = 'active';
            """, (chat_id,))
            products = cur.fetchall()
            print(f"üì¶ –ê–∫—Ç–∏–≤–Ω—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è —á–∞—Ç—É {chat_id}: {products}")
            return products
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤: {e}")
        finally:
            cur.close()
            conn.close()

def get_products_by_ids(product_ids):
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                SELECT product_id, name, category
                FROM products
                WHERE product_id = ANY(%s);
            """, (list(map(int, product_ids)),))
            return cur.fetchall()
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ ID: {e}")
        finally:
            cur.close()
            conn.close()
    return []

def mark_product_as_deleted(product_id):
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                UPDATE products
                SET status = 'deleted'
                WHERE product_id = %s;
            """, (product_id,))
            conn.commit()
            print(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–º—ñ—á–µ–Ω–æ —è–∫ '–≤–∏–¥–∞–ª–µ–Ω–∏–π'.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–º—ñ—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —è–∫ '–≤–∏–¥–∞–ª–µ–Ω–∏–π': {e}")
        finally:
            cur.close()
            conn.close()

def add_expense(amount, product_ids, chat_id, category=None):
    """
    –î–æ–¥–∞—î –≤–∏—Ç—Ä–∞—Ç—É –≤ —Ç–∞–±–ª–∏—Ü—é expenses.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
    amount - –°—É–º–∞ –≤–∏—Ç—Ä–∞—Ç–∏
    category - –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏—Ç—Ä–∞—Ç–∏
    product_ids - –°–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä—ñ–≤
    chat_id - ID —á–∞—Ç—É
    """
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                INSERT INTO expenses (amount, category, product_ids, chat_id)
                VALUES (%s, %s, %s, %s)
                RETURNING expense_id, expense_date;
            """, (amount, category, [int(pid) for pid in product_ids], chat_id))
            
            result = cur.fetchone()
            if result:
                expense_id, expense_date = result
                conn.commit()
                print(f"‚úÖ –í–∏—Ç—Ä–∞—Ç—É –∑ ID {expense_id} –¥–æ–¥–∞–Ω–æ –Ω–∞ {expense_date}.")
                return expense_id
            else:
                print("‚ùå –ü–æ–º–∏–ª–∫–∞: INSERT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ ID –≤–∏—Ç—Ä–∞—Ç–∏.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
        finally:
            cur.close()
            conn.close()

def mark_product_as_purchased(product_id):
    """
    –û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç—É—Å —Ç–æ–≤–∞—Ä—É –≤ —Ç–∞–±–ª–∏—Ü—ñ `products` –Ω–∞ 'purchased'.
    """
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                UPDATE products
                SET status = 'purchased'
                WHERE product_id = %s;
            """, (product_id,))
            conn.commit()
            print(f"‚úÖ –¢–æ–≤–∞—Ä –∑ ID {product_id} –ø–æ–∑–Ω–∞—á–µ–Ω–æ —è–∫ 'purchased'.")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É —è–∫ 'purchased': {e}")
        finally:
            cur.close()
            conn.close()