import requests
from telegram import Bot
from utils.logger import log  # —è–∫—â–æ —É —Ç–µ–±–µ —î –ª–æ–≥–µ—Ä
from utils.env_loader import load_env
import os
from utils.logger import log
from deep_translator import GoogleTranslator

# üîë Hugging Face Token
load_env()
API_KEY_HF = os.environ.get("API_KEY_HF")
HF_API_URL = "https://api-inference.huggingface.co/models/google/vit-base-patch16-224"
HEADERS = {"Authorization": f"Bearer {API_KEY_HF}"}

# –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É API –∫–ª—é—á–∞
# –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å API –∫–ª—é—á–∞
if not API_KEY_HF:
    log("‚ùå –ü–æ–º–∏–ª–∫–∞: API_KEY_HF –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è")
    log("–ë—É–¥—å –ª–∞—Å–∫–∞, –¥–æ–¥–∞–π—Ç–µ API_KEY_HF —É —Ñ–∞–π–ª .env")
    HEADERS = {}
else:
    log(f"‚úÖ API –∫–ª—é—á –∑–Ω–∞–π–¥–µ–Ω–æ (–¥–æ–≤–∂–∏–Ω–∞: {len(API_KEY_HF)} —Å–∏–º–≤–æ–ª—ñ–≤)")
    HEADERS = {"Authorization": f"Bearer {API_KEY_HF}"}


async def classify_image_from_telegram(bot: Bot, telegram_file_id: str) -> str:
    log(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—é –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {telegram_file_id}")
    try:
        # 1. –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª Telegram
        file = await bot.get_file(telegram_file_id)
        image_bytes = await file.download_as_bytearray()
        log(f"–†–æ–∑–º—ñ—Ä –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {len(image_bytes)} –±–∞–π—Ç")

        # 2. –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        headers = {
            "Authorization": f"Bearer {API_KEY_HF}",
            "Content-Type": "image/jpeg",
            "Accept-Language": "uk"  # –í–∫–∞–∑—É—î–º–æ –º–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        }

       # 3. –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ Hugging Face
        log(f"–ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ {HF_API_URL}")
        response = requests.post(
            HF_API_URL,
            headers=headers,  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            data=image_bytes,
            timeout=30  # –î–æ–¥–∞—î–º–æ —Ç–∞–π–º–∞—É—Ç
        )
        
        # 4. –õ–æ–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        log(f"\n–°—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.status_code}")
        log(f"\n–ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.headers}")
        log(f"\n–¢—ñ–ª–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: {response.text[:500]}")

        # 5. –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å   
        if response.status_code != 200:
            log(f"–ü–æ–º–∏–ª–∫–∞ API: {response.status_code} - {response.text}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è (–∫–æ–¥ {response.status_code})"

        result = response.json()
        log(f"–†–æ–∑–ø–∞—Ä—Å–µ–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å: {result}")

        # 6. –û–±—Ä–æ–±–ª—è—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        if isinstance(result, list) and len(result) > 0:
            top_prediction = result[0]
            label = top_prediction.get("label")
            log(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: {label}")
            try:
                translated = GoogleTranslator(source='en', target='uk').translate(label)
                return f"üîç {translated.capitalize()}"
            except Exception as e:
                log(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}")
                return f"{label.capitalize()}"
            
        return "‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"

    except Exception as e:
        log(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        return "‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è."