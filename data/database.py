import os
import psycopg2
import sys
import time  

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from utils.env_loader import load_env

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_env()
DATABASE_URL = os.environ.get("DATABASE_URL")

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def connect_to_database(retries=5, delay=2):
    for attempt in range(1, retries + 1):
        try:
            conn = psycopg2.connect(DATABASE_URL)
            print(f"‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ (—Å–ø—Ä–æ–±–∞ {attempt})")
            return conn
        except Exception as e:
            print(f"‚ùå –°–ø—Ä–æ–±–∞ {attempt} –Ω–µ –≤–¥–∞–ª–∞—Å—è: {e}")
            if attempt < retries:
                print(f"‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é —Å–ø—Ä–æ–±–æ—é...")
                time.sleep(delay)
            else:
                print("üî¥ –í–∏—á–µ—Ä–ø–∞–Ω–æ –≤—Å—ñ —Å–ø—Ä–æ–±–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö.")
    return None

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
def create_tables():
    print(f"DATABASE_URL: {DATABASE_URL}")
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()

        try:
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ `products`
            cur.execute("""
            CREATE TABLE IF NOT EXISTS products (
                product_id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                category TEXT NOT NULL,
                chat_id BIGINT NOT NULL,
                status TEXT NOT NULL CHECK (status IN ('active', 'deleted', 'purchased')) DEFAULT 'active'
            );
            """)

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ `expenses`
            cur.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                expense_id SERIAL PRIMARY KEY,
                expense_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                amount NUMERIC(10, 2) NOT NULL,
                category TEXT NOT NULL,
                product_ids INTEGER[] NOT NULL,
                chat_id BIGINT NOT NULL
            );
            """)

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ `categories`
            cur.execute("""
            CREATE TABLE IF NOT EXISTS categories (
                category_id SERIAL PRIMARY KEY,
                name TEXT NOT NULL,
                chat_id BIGINT NOT NULL,
                created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                is_active BOOLEAN DEFAULT TRUE,
                UNIQUE(name, chat_id)  -- —É–Ω—ñ–∫–∞–ª—å–Ω–∞ –ø–∞—Ä–∞ –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ —á–∞—Ç
            );
            """)

            conn.commit()
            print("‚úÖ –¢–∞–±–ª–∏—Ü—ñ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        finally:
            if 'cur' in locals() and cur:
                cur.close()
            if 'conn' in locals() and conn:
                conn.close()

# CRUD-—Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏—Ç—Ä–∞—Ç
def add_expense(amount, category, product_ids, chat_id):
    conn = connect_to_database()
    if conn:
        cur = conn.cursor()
        try:
            cur.execute("""
                INSERT INTO expenses (amount, category, product_ids, chat_id)
                VALUES (%s, %s, %s, %s)
                RETURNING expense_id;
            """, (amount, category, [int(pid) for pid in product_ids], chat_id))
            expense_id = cur.fetchone()[0]
            conn.commit()
            print(f"‚úÖ –í–∏—Ç—Ä–∞—Ç–∞ –∑ ID {expense_id} –¥–æ–¥–∞–Ω–∞.")
            return expense_id
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏: {e}")
        finally:
            cur.close()
            conn.close()

# –ó–∞–ø—É—Å–∫ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å
if __name__ == "__main__":
    create_tables()
