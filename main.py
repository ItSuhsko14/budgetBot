import os
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)
from telegram.error import TelegramError

from handlers.start_handler import start
from handlers.message_handler import handle_message
from handlers.button_handler import button
from data.database import create_tables
from utils.logger import log


def load_env():
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env"""
    if os.path.exists(".env"):
        with open(".env") as f:
            for line in f:
                if line.strip() and not line.startswith("#"):
                    key, value = line.strip().split("=", 1)
                    os.environ[key] = value


async def error_handler(update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –≤–∏–Ω—è—Ç–∫—ñ–≤"""
    log("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è", exc_info=True)

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ —Ö–æ—á–µ—à –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫)
    try:
        if update and update.effective_message:
            await update.effective_message.reply_text("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –Ω–∞–¥ —Ü–∏–º –ø—Ä–∞—Ü—é—î–º–æ.")
    except TelegramError:
        pass  # –ù–µ –º–æ–∂–µ–º–æ –Ω–∞–≤—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É


# --- –ó–∞–ø—É—Å–∫ ---
load_env()

TOKEN = os.getenv("TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PORT = int(os.getenv("PORT", 8443))

if __name__ == "__main__":
    try:
        log("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        create_tables()

        application = Application.builder().token(TOKEN).build()

        # Handlers
        application.add_handler(CommandHandler("start", start))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        application.add_handler(CallbackQueryHandler(button))

        # Error handler
        application.add_error_handler(error_handler)

        log(f"üåê –ë–æ—Ç –ø—Ä–∞—Ü—é—î –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")
        application.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
        )

    except Exception:
        log("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É", exc_info=True)
