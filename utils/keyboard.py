from utils.logger import log
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from data.chat_data import chat_data
from telegram import ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.error import BadRequest

def createOneProductButton(product, chat_id):
        if product[0] in chat_data[chat_id].get('selected_items', []):
            log(f"{product[0], product[1]} –ø–æ–∑–Ω–∞—á–µ–Ω–æ –≤–∏–¥—ñ–ª–µ–Ω–∏–º")
            return InlineKeyboardButton(f"‚úÖ {product[1]}", callback_data=f"unselect:{product[0]}")
        else:
            return InlineKeyboardButton(product[1], callback_data=f"select:{product[0]}")

def createProductGroupButtons(products, chat_id):
    rows = []
    current_row = []
    current_length = 0
    max_row_length = 30  # –ú–æ–∂–Ω–∞ —Ä–µ–≥—É–ª—é–≤–∞—Ç–∏

    for product in products:
        btn = createOneProductButton(product, chat_id)
        btn_length = len(btn.text)

        if current_length + btn_length > max_row_length and current_row:
            rows.append(current_row)
            current_row = [btn]
            current_length = btn_length
        else:
            current_row.append(btn)
            current_length += btn_length

    if current_row:
        rows.append(current_row)

    return rows

def createOneCategoryButton(category, chat_id):
    if str(category[0]) in chat_data[chat_id].get('selected_categories', []):
        log(f"{category[0], category[1]} –ø–æ–∑–Ω–∞—á–µ–Ω–æ –≤–∏–¥—ñ–ª–µ–Ω–∏–º")
        wide_button = InlineKeyboardButton(f"‚úÖ --- {category[1]} ---", callback_data=f"unselect_category:{category[0]}")
    else:
        wide_button = InlineKeyboardButton(f"--- {category[1]} ---", callback_data=f"select_category:{category[0]}")
    add_btn = InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"add_product_with_category:{category[0]}")
    
    return [wide_button, add_btn]

def create_hide_empty_category_button(chat_id):
    if chat_data[chat_id]['hide_empty_category']:
        return [[InlineKeyboardButton("‚ûï –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="show_category")]]
    else:
        return [[InlineKeyboardButton("‚ûï –°—Ö–æ–≤–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="hide_category")]]

async def create_keyboard_keys(chat_id):
    products = chat_data[chat_id]['list_items']
    categories = chat_data[chat_id]['categories']
    buttons = []

    for category in categories:
        category_products = []
        for p in products:
            try:
                if p[2] is not None and p[2] and p[2] == category[0]:
                    category_products.append(p)
            except (ValueError, TypeError, IndexError):
                continue
        
        show_category = not chat_data[chat_id]['hide_empty_category'] or len(category_products) > 0
        if show_category:
            buttons.append(createOneCategoryButton(category, chat_id))
        product_buttons = createProductGroupButtons(category_products, chat_id)
        buttons.extend(product_buttons)
    
    existing_category_ids = {c[0] for c in categories}

    without_category_products = []
    for product in products:
        if product[2] is None or product[2] not in existing_category_ids:
            without_category_products.append(product)

    without_category_products_group = createProductGroupButtons(without_category_products, chat_id)
    if (len(without_category_products) > 0):
        buttons.append([InlineKeyboardButton("--- –ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="no_category"), InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="add_product")])
    buttons.extend(without_category_products_group)
    
    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥—ñ–π
    # separator = InlineKeyboardButton(" ", callback_data="noop")
    action_buttons = [
        [InlineKeyboardButton("‚úÖ –ü–æ–∑–Ω–∞—á–∏—Ç–∏ –∫—É–ø–ª–µ–Ω–∏–º–∏", callback_data="finish_purchasing"),
        InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data="finish_deleting")],
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="add_category"),
        InlineKeyboardButton("‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é", callback_data="delete_category")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ –º—ñ—Å—è—Ü—å", callback_data="show_expenses"),
        InlineKeyboardButton("‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞", callback_data="info")]
    ]
    hide_empty_category_button = create_hide_empty_category_button(chat_id)
    return InlineKeyboardMarkup(buttons + action_buttons + hide_empty_category_button)

async def create_keyboard(chat_id, context=None):
    # –û–± º—î–¥–Ω—É—î–º–æ –≤—Å–µ –≤ –æ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    full_keyboard = await create_keyboard_keys(chat_id)

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    keyboard_message = await context.bot.send_message(chat_id, "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤", reply_markup=full_keyboard)
    
    chat_data[chat_id]['keyboard_message_id'] = keyboard_message.message_id
    return keyboard_message

async def update_keyboard(chat_id, context):
    if chat_id not in chat_data or 'keyboard_message_id' not in chat_data[chat_id]:
        log("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return

    new_keyboard = await create_keyboard_keys(chat_id)
    
    # –û–Ω–æ–≤–ª—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
    keyboard_message_id = chat_data[chat_id]['keyboard_message_id']
    try:
        await context.bot.edit_message_reply_markup(
            chat_id=chat_id,
            message_id=keyboard_message_id,
            reply_markup=new_keyboard
        )
        log("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–∞")
    except BadRequest as e:
        if "Message is not modified" in str(e):
            log("–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –≤–∂–µ –æ–Ω–æ–≤–ª–µ–Ω–∞")
        else:
            log(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {e}")
    except Exception as e:
        log(f"–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏: {e}")

async def delete_keyboard(chat_id, context):
    if 'keyboard_message_id' in chat_data[chat_id] and chat_data[chat_id]['keyboard_message_id'] is not None:
        try:
            keyboard_message_id = chat_data[chat_id]['keyboard_message_id']
            await context.bot.delete_message(chat_id=chat_id, message_id=keyboard_message_id)
        except Exception as e:
            log(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É: {e}")
        finally:
            chat_data[chat_id]['keyboard_message_id'] = None

async def remove_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        log("–í–∏–¥–∞–ª—è—é –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É...")
    except Exception as e:
        log(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É: {e}")